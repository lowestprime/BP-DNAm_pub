gc()
gc()
pacman::p_unload(pacman::p_loaded(), character.only = TRUE)
gc()
pacman::p_load(qs, ggplot2, plotly, RColorBrewer, reshape2, minfi, GenomicRanges, SummarizedExperiment)
qload("BipolarMethylationData.qs", nthreads = 36)
sample_groups <- as.factor(pData(mSetSqFlt)$Sample_Group)
beta_values <- getBeta(mSetSqFlt)
rm(mSetSqFlt)
qsavem(beta_values,sample_groups,file="Density_Data.qs",nthreads=36,preset="uncompressed")
densityPlot(beta_values, sampGroups = sample_groups, main = "Normalized", legend = FALSE)
gc()
densityPlot <- densityPlot(beta_values, sampGroups = sample_groups, main = "Normalized", legend = FALSE)
qsavem(beta_values,sample_groups,densityPlot,file="Density_Data.qs",nthreads=36,preset="uncompressed")
view(densityPlot)
print(densityPlot)
viewer(densityPlot)
View(beta_values)
View(densityPlot)
qsavem(beta_values,sample_groups,file="Density_Data.qs",nthreads=36,preset="uncompressed")
plot_object <- recordPlot()
View(plot_object)
replayPlot(plot_object)
plot_object <- recordPlot()
densityPlot(beta_values, sampGroups = sample_groups, main = "Normalized", legend = FALSE)
plot_object <- recordPlot()
densityPlot <- recordPlot()
rm(plot_object)
print(densityPlot)
print(densityPlot)
qsavem(beta_values,sample_groups,densityPlot,file="Density_Data.qs",nthreads=36,preset="uncompressed")
gc()
pacman::p_load(qs, ggplot2, plotly, RColorBrewer, reshape2, minfi, GenomicRanges, SummarizedExperiment)
setwd("~/project-ophoff/BP-DNAm")
qload("Density_Data.qs", nthreads=36)
beta_df <- as.data.frame(beta_values) %>%
mutate(SampleGroup = sample_groups)
rlang::last_trace()
str(beta_values)
str(sample_groups)
gc()
# Reshape beta_values to long format
beta_values_long <- melt(beta_values, varnames = c("CpG_Site", "Sample"), value.name = "Beta_Value")
beta_values_long <- beta_values_long %>%
mutate(SampleGroup = sample_groups[match(beta_values_long$Sample, colnames(beta_values))])
str(beta_values_long)
qsave(beta_values_long,file="beta_values_long.qs,nthreads=36,preset="uncompressed")
qsave(beta_values_long,file="beta_values_long.qs",nthreads=36,preset="uncompressed")
gc()
ls()
ls(all.names = T)
rm(beta_values)
gc()
if (!requireNamespace("lobstr", quietly = TRUE)) {
install.packages("lobstr")
}
library(lobstr)
# Get memory usage of all objects
memory_usage <- lobstr::obj_sizes(ls(envir = .GlobalEnv))
# Sort memory usage in descending order
sorted_memory_usage <- memory_usage[order(memory_usage$bytes, decreasing = TRUE), ]
object_names <- ls(envir = .GlobalEnv)
object_sizes <- lobstr::obj_sizes(sapply(object_names, get, envir = .GlobalEnv))
# Sort memory usage in descending order
sorted_object_sizes <- sort(object_sizes, decreasing = TRUE)
# Convert to a readable data frame
memory_usage_df <- data.frame(
Object = names(sorted_object_sizes),
Size = sorted_object_sizes,
stringsAsFactors = FALSE
)
# Convert to a readable data frame
memory_usage_df <- data.frame(
Object = names(sorted_object_sizes),
Size = as.numeric(sorted_object_sizes),
stringsAsFactors = FALSE
)
# Get memory usage of all objects
object_names <- ls(envir = .GlobalEnv)
if (length(object_names) > 0) {
object_sizes <- sapply(object_names, function(x) lobstr::obj_size(get(x, envir = .GlobalEnv)))
# Sort memory usage in descending order
sorted_object_sizes <- sort(object_sizes, decreasing = TRUE)
# Convert to a readable data frame
memory_usage_df <- data.frame(
Object = names(sorted_object_sizes),
Size = as.numeric(sorted_object_sizes),
stringsAsFactors = FALSE
)
print(memory_usage_df)
} else {
print("No objects found in the global environment.")
}
# Get memory usage of all objects
object_names <- ls(envir = .GlobalEnv)
if (length(object_names) > 0) {
object_sizes <- sapply(object_names, function(x) lobstr::obj_size(get(x, envir = .GlobalEnv)))
object_df <- data.frame(
Name = names(object_sizes),
Size_GB = as.numeric(object_sizes) / (1024^3),
Type = "Object",
stringsAsFactors = FALSE
)
} else {
object_df <- data.frame(Name = character(), Size_GB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Get memory usage of all loaded packages
package_names <- search()
package_names <- package_names[grepl("package:", package_names)]
package_names <- gsub("package:", "", package_names)
if (length(package_names) > 0) {
get_package_memory <- function(pkg) {
pkg_objects <- ls(paste("package", pkg, sep = ":"))
total_size <- sum(sapply(pkg_objects, function(x) {
obj <- get(x, envir = asNamespace(pkg), inherits = FALSE)
lobstr::obj_size(obj)
}))
return(total_size)
}
package_memory <- sapply(package_names, get_package_memory)
package_df <- data.frame(
Name = names(package_memory),
Size_GB = as.numeric(package_memory) / (1024^3),
Type = "Package",
stringsAsFactors = FALSE
)
} else {
package_df <- data.frame(Name = character(), Size_GB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Get memory usage of all objects
object_names <- ls(envir = .GlobalEnv)
if (length(object_names) > 0) {
object_sizes <- sapply(object_names, function(x) lobstr::obj_size(get(x, envir = .GlobalEnv)))
object_df <- data.frame(
Name = names(object_sizes),
Size_GB = as.numeric(object_sizes) / (1024^3),
Type = "Object",
stringsAsFactors = FALSE
)
} else {
object_df <- data.frame(Name = character(), Size_GB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Get memory usage of all loaded packages
package_names <- search()
package_names <- package_names[grepl("package:", package_names)]
package_names <- gsub("package:", "", package_names)
if (length(package_names) > 0) {
get_package_memory <- function(pkg) {
pkg_objects <- ls(paste("package", pkg, sep = ":"))
total_size <- sum(sapply(pkg_objects, function(x) {
tryCatch({
obj <- get(x, envir = asNamespace(pkg), inherits = FALSE)
lobstr::obj_size(obj)
}, error = function(e) {
return(0)
})
}))
return(total_size)
}
package_memory <- sapply(package_names, get_package_memory)
package_df <- data.frame(
Name = names(package_memory),
Size_GB = as.numeric(package_memory) / (1024^3),
Type = "Package",
stringsAsFactors = FALSE
)
} else {
package_df <- data.frame(Name = character(), Size_GB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Combine and sort the data frames
combined_df <- rbind(object_df, package_df)
sorted_combined_df <- combined_df[order(combined_df$Size_GB, decreasing = TRUE), ]
# Add total row at the top
total_size <- sum(sorted_combined_df$Size_GB)
total_df <- data.frame(Name = "Total", Size_GB = total_size, Type = "Total", stringsAsFactors = FALSE)
final_df <- rbind(total_df, sorted_combined_df)
print(final_df)
View(final_df)
# Get memory usage of all objects
object_names <- ls(envir = .GlobalEnv)
if (length(object_names) > 0) {
object_sizes <- sapply(object_names, function(x) lobstr::obj_size(get(x, envir = .GlobalEnv)))
object_df <- data.frame(
Name = names(object_sizes),
Size_GB = round(as.numeric(object_sizes) / (1024^3), 2),
Type = "Object",
stringsAsFactors = FALSE
)
} else {
object_df <- data.frame(Name = character(), Size_GB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Get memory usage of all loaded packages
package_names <- search()
package_names <- package_names[grepl("package:", package_names)]
package_names <- gsub("package:", "", package_names)
if (length(package_names) > 0) {
get_package_memory <- function(pkg) {
pkg_objects <- ls(paste("package", pkg, sep = ":"))
total_size <- sum(sapply(pkg_objects, function(x) {
tryCatch({
obj <- get(x, envir = asNamespace(pkg), inherits = FALSE)
lobstr::obj_size(obj)
}, error = function(e) {
return(0)
})
}))
return(total_size)
}
package_memory <- sapply(package_names, get_package_memory)
package_df <- data.frame(
Name = names(package_memory),
Size_GB = round(as.numeric(package_memory) / (1024^3), 2),
Type = "Package",
stringsAsFactors = FALSE
)
} else {
package_df <- data.frame(Name = character(), Size_GB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Combine and sort the data frames
combined_df <- rbind(object_df, package_df)
sorted_combined_df <- combined_df[order(combined_df$Size_GB, decreasing = TRUE), ]
# Add total row at the top
total_size <- sum(sorted_combined_df$Size_GB)
total_df <- data.frame(Name = "Total", Size_GB = round(total_size, 2), Type = "Total", stringsAsFactors = FALSE)
final_df <- rbind(total_df, sorted_combined_df)
# Print the final data frame without scientific notation
options(scipen = 999)
print(final_df, row.names = FALSE)
rm(*_df)
ls(*_df)
ls("*_df")
ls(pattern=_df)
ls(pattern="_df")
rm(ls(pattern = "_df"))
rm(list = ls(pattern = "_df"))
# Get memory usage of all objects
object_names <- ls(envir = .GlobalEnv)
if (length(object_names) > 0) {
object_sizes <- sapply(object_names, function(x) lobstr::obj_size(get(x, envir = .GlobalEnv)))
object_df <- data.frame(
Name = names(object_sizes),
Size_MB = round(as.numeric(object_sizes) / (1024^2), 3),
Type = "Object",
stringsAsFactors = FALSE
)
} else {
object_df <- data.frame(Name = character(), Size_MB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Get memory usage of all loaded packages
package_names <- search()
package_names <- package_names[grepl("package:", package_names)]
package_names <- gsub("package:", "", package_names)
if (length(package_names) > 0) {
get_package_memory <- function(pkg) {
pkg_objects <- ls(paste("package", pkg, sep = ":"))
total_size <- sum(sapply(pkg_objects, function(x) {
tryCatch({
obj <- get(x, envir = asNamespace(pkg), inherits = FALSE)
lobstr::obj_size(obj)
}, error = function(e) {
return(0)
})
}))
return(total_size)
}
package_memory <- sapply(package_names, get_package_memory)
package_df <- data.frame(
Name = names(package_memory),
Size_MB = round(as.numeric(package_memory) / (1024^2), 3),
Type = "Package",
stringsAsFactors = FALSE
)
} else {
package_df <- data.frame(Name = character(), Size_MB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Combine and sort the data frames
combined_df <- rbind(object_df, package_df)
sorted_combined_df <- combined_df[order(combined_df$Size_MB, decreasing = TRUE), ]
# Add total row at the top
total_size <- sum(sorted_combined_df$Size_MB)
total_df <- data.frame(Name = "Total", Size_MB = round(total_size, 3), Type = "Total", stringsAsFactors = FALSE)
final_df <- rbind(total_df, sorted_combined_df)
# Print the final data frame without scientific notation
options(scipen = 999)
row.names(final_df) <- NULL
print(final_df)
gc()
memory.profile()
system("top -b -n1 -o %MEM | head -n 20")
gc()
# Get memory usage of all objects
object_names <- ls(envir = .GlobalEnv)
if (length(object_names) > 0) {
object_sizes <- sapply(object_names, function(x) lobstr::obj_size(get(x, envir = .GlobalEnv)))
object_df <- data.frame(
Name = names(object_sizes),
Size_MB = round(as.numeric(object_sizes) / (1024^2), 3),
Type = "Object",
stringsAsFactors = FALSE
)
} else {
object_df <- data.frame(Name = character(), Size_MB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Get memory usage of all loaded packages
package_names <- search()
package_names <- package_names[grepl("package:", package_names)]
package_names <- gsub("package:", "", package_names)
if (length(package_names) > 0) {
get_package_memory <- function(pkg) {
pkg_objects <- ls(paste("package", pkg, sep = ":"))
total_size <- sum(sapply(pkg_objects, function(x) {
tryCatch({
obj <- get(x, envir = asNamespace(pkg), inherits = FALSE)
lobstr::obj_size(obj)
}, error = function(e) {
return(0)
})
}))
return(total_size)
}
package_memory <- sapply(package_names, get_package_memory)
package_df <- data.frame(
Name = names(package_memory),
Size_MB = round(as.numeric(package_memory) / (1024^2), 3),
Type = "Package",
stringsAsFactors = FALSE
)
} else {
package_df <- data.frame(Name = character(), Size_MB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Combine and sort the data frames
combined_df <- rbind(object_df, package_df)
sorted_combined_df <- combined_df[order(combined_df$Size_MB, decreasing = TRUE), ]
# Add total row at the top
total_size <- sum(sorted_combined_df$Size_MB)
total_df <- data.frame(Name = "Total", Size_MB = round(total_size, 3), Type = "Total", stringsAsFactors = FALSE)
final_df <- rbind(total_df, sorted_combined_df)
# Print the final data frame without scientific notation
options(scipen = 999)
row.names(final_df) <- NULL
print(final_df)
pacman::p_load(pryr)
mem_used()
lobstr::mem_used()
# Get memory usage of all objects
object_names <- ls(envir = .GlobalEnv)
if (length(object_names) > 0) {
object_sizes <- sapply(object_names, function(x) lobstr::obj_size(get(x, envir = .GlobalEnv)))
object_df <- data.frame(
Name = names(object_sizes),
Size_MB = round(as.numeric(object_sizes) / (1024^2), 3),
Type = "Object",
stringsAsFactors = FALSE
)
} else {
object_df <- data.frame(Name = character(), Size_MB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Get memory usage of all loaded packages
package_names <- search()
package_names <- package_names[grepl("package:", package_names)]
package_names <- gsub("package:", "", package_names)
if (length(package_names) > 0) {
get_package_memory <- function(pkg) {
pkg_objects <- ls(paste("package", pkg, sep = ":"))
total_size <- sum(sapply(pkg_objects, function(x) {
tryCatch({
obj <- get(x, envir = asNamespace(pkg), inherits = FALSE)
lobstr::obj_size(obj)
}, error = function(e) {
return(0)
})
}))
return(total_size)
}
package_memory <- sapply(package_names, get_package_memory)
package_df <- data.frame(
Name = names(package_memory),
Size_MB = round(as.numeric(package_memory) / (1024^2), 3),
Type = "Package",
stringsAsFactors = FALSE
)
} else {
package_df <- data.frame(Name = character(), Size_MB = numeric(), Type = character(), stringsAsFactors = FALSE)
}
# Combine and sort the data frames
combined_df <- rbind(object_df, package_df)
sorted_combined_df <- combined_df[order(combined_df$Size_MB, decreasing = TRUE), ]
# Add total row at the top
total_size <- sum(sorted_combined_df$Size_MB)
total_df <- data.frame(Name = "Total", Size_MB = round(total_size, 3), Type = "Total", stringsAsFactors = FALSE)
final_df <- rbind(total_df, sorted_combined_df)
# Print the final data frame without scientific notation
options(scipen = 999)
row.names(final_df) <- NULL
print(final_df)
object_sizes <- sapply(ls(), function(x) object.size(get(x)))
print(object_sizes)
closeAllConnections()
closeAllConnections()
ls(all.names = TRUE)
object.size(all.names=T)
sessionInfo()
large_objects <- sapply(ls(all.names = TRUE), function(x) object.size(get(x)))
large_objects <- sort(large_objects, decreasing = TRUE)
print(large_objects)
setwd('~/')
setwd('/etc/rstudio/rserver.conf')
setwd('/etc/rstudio/rserver.conf')
setwd('~/etc/rstudio/rserver.conf')
gc()
gc()
library(memtools)
# Function to inspect and take snapshots of each environment
inspect_environment <- function(index) {
env <- ns_registry[[index]]
cat("Inspecting environment", index, ":", names(ns_registry)[index], "\n")
print(env)
# Take snapshot with error handling
tryCatch({
s <- mem_snapshot(list(env))
print(s)
}, error = function(e) {
cat("Error in snapshot for environment", index, ":", e$message, "\n")
})
}
# Inspect and take snapshots of each environment individually
for (i in seq_along(ns_registry)) {
inspect_environment(i)
}
ns_registry <- root_ns_registry()
# Function to inspect and take snapshots of each environment
inspect_environment <- function(index) {
env <- ns_registry[[index]]
cat("Inspecting environment", index, ":", names(ns_registry)[index], "\n")
print(env)
# Take snapshot with error handling
tryCatch({
s <- mem_snapshot(list(env))
print(s)
}, error = function(e) {
cat("Error in snapshot for environment", index, ":", e$message, "\n")
})
}
# Inspect and take snapshots of each environment individually
for (i in seq_along(ns_registry)) {
inspect_environment(i)
}
# Inspect objects within each environment individually
for (i in seq_along(ns_registry)) {
env_name <- names(ns_registry)[i]
env <- ns_registry[[i]]
inspect_environment_objects(env_name, env)
}
inspect_environment_objects <- function(env_name, env) {
cat("Inspecting environment:", env_name, "\n")
env_objects <- ls(env, all.names = TRUE)
for (obj_name in env_objects) {
cat("  Inspecting object:", obj_name, "\n")
obj <- try(get(obj_name, envir = env), silent = TRUE)
# Skip if object cannot be accessed
if (inherits(obj, "try-error")) {
cat("  Cannot access object:", obj_name, "\n")
next
}
# Take snapshot with error handling
tryCatch({
s <- mem_snapshot(list(obj))
print(s)
}, error = function(e) {
cat("  Error in snapshot for object:", obj_name, ":", e$message, "\n")
})
}
# Inspect objects within each environment individually
for (i in seq_along(ns_registry)) {
env_name <- names(ns_registry)[i]
env <- ns_registry[[i]]
inspect_environment_objects(env_name, env)
}
# Function to inspect and take snapshots of each object within an environment
inspect_environment_objects <- function(env_name, env) {
cat("Inspecting environment:", env_name, "\n")
env_objects <- ls(env, all.names = TRUE)
for (obj_name in env_objects) {
cat("  Inspecting object:", obj_name, "\n")
obj <- try(get(obj_name, envir = env), silent = TRUE)
# Skip if object cannot be accessed
if (inherits(obj, "try-error")) {
cat("  Cannot access object:", obj_name, "\n")
next
}
# Take snapshot with error handling
tryCatch({
s <- mem_snapshot(list(obj))
cat("  Successfully snapped object:", obj_name, "\n")
print(s)
}, error = function(e) {
cat("  Error in snapshot for object:", obj_name, ":", e$message, "\n")
})
}
# Inspect objects within each environment individually
for (i in seq_along(ns_registry)) {
env_name <- names(ns_registry)[i]
env <- ns_registry[[i]]
inspect_environment_objects(env_name, env)
}
setwd('/u/project/ophoff/cobeaman/BP-DNAm')
setwd('~/')
setwd('/u/project/ophoff/cobeaman/BP-DNAm')
setwd('~/')
load("/u/project/ophoff/cobeaman/BP-DNAm/.RData")
load("/u/project/lhernand/cobeaman/ABCD_Longitudinal_Subcortical_Imaging_GWAS/long_smri_roc_gcta.RData")
setwd("/u/project/lhernand/cobeaman/ABCD_Longitudinal_Subcortical_Imaging_GWAS")
