# Export BPDNAm_SS_noNAs
# BPDNAm_SS_noNAs %>%
#   {
#     num_samples <- nrow(.)
#     filename <- sprintf("BPDNAm_noNA_Samples_%d.csv", num_samples)
#     fwrite(., filename)
#   }
# load packages
pacman::p_load(bigmemory, biganalytics, parallel, data.table)
# Go to DNAmGrimAgeGitHub dir
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
# load external functions
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
# load sample sheet (with NA rows)
sample_annotation <- BPDNAm_SS_updated
# Get sample names from methylation data
Density_data <- qread("/u/scratch/c/cobeaman/Density_Data.qs", nthreads = 36)
# load packages
pacman::p_load(minfi, IlluminaHumanMethylationEPICv2anno.20a1.hg38, dplyr,
data.table, BioAge, dnaMethyAge, meffil, methylclock, qs, ggplot2,
plotly, RColorBrewer, reshape2, GenomicRanges, bigmemory, biganalytics,
SummarizedExperiment, tidyverse, purrr)
# Go to DNAmGrimAgeGitHub dir
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
# load external functions
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
# load sample sheet (with NA rows)
sample_annotation <- BPDNAm_SS_updated
# Get sample names from methylation data
Density_data <- qread("/u/scratch/c/cobeaman/Density_Data.qs", nthreads = 36)
# Density_data <- qread("~/project-ophoff/BP-DNAm/Density_Data.qs", nthreads = 36)
meth_sample_names <- Density_Data$sample_groups
Density_Data <- Density_data
rm(Density_data)
meth_sample_names <- Density_Data$sample_groups
# Load GrimAge2 source code data
grimage2 <- readRDS("input/DNAmGrimAge2_final.Rds")
cpgs <- as.data.table(grimage2[[1]])  # Ensure it's a data.table
setkey(cpgs, Y.pred)  # Set key for faster subsetting
glmnet.final1 <- as.data.table(grimage2[[2]])
gold <- as.data.table(grimage2[[3]])
# Convert beta_values to big.matrix
beta_values_b <- as.big.matrix(beta_values)
# Convert beta_values to big.matrix
beta_values_b <- as.big.matrix(Density_Data$beta_values)
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
# Align data
common_samples <- intersect(meth_sample_names, sample_annotation$Sample_Name)
sample_annotation <- as.data.table(sample_annotation[match(common_samples, sample_annotation$Sample_Name), ])
# Get unique Y.pred values
Ys <- unique(cpgs$Y.pred)
# Step 1: Generate DNAm Protein Variables using parallel processing
# Parallel processing setup
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
# Export necessary objects and functions to the cluster
clusterExport(cl, c("calculate_Y_pred", "cpgs", "beta_values"))
BPDNAm_SS_updated %>%
{
num_samples <- nrow(.)
filename <- sprintf("BPDNAm_SS_updated_%d.csv", num_samples)
fwrite(., filename)
}
# Export necessary objects and functions to the cluster
clusterExport(cl, c("calculate_Y_pred", "cpgs", "beta_values_b"))
clusterEvalQ(cl, {
library(data.table)
setkey(cpgs, Y.pred)  # Set key in each worker
})
# Run parallel computation
Y_preds <- parLapplyLB(cl, Ys, function(Y) {
calculate_Y_pred(Y, cpgs, beta_values_b)
})
gc()
# load external functions
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
# Create a descriptor of the big.matrix
beta_values_desc <- describe(beta_values_b)
# Set up the cluster
cl <- makeCluster(num_cores)
# Export necessary objects and functions to the cluster
clusterExport(cl, c("calculate_Y_pred", "cpgs", "beta_values_desc", "Ys"))
# Load required libraries and attach the big.matrix on each worker
clusterEvalQ(cl, {
library(bigmemory)
library(data.table)
setkey(cpgs, Y.pred)
beta_values_b <- attach.big.matrix(beta_values_desc)
})
# Run parallel computation
Y_preds <- parLapplyLB(cl, Ys, function(Y) {
calculate_Y_pred(Y, cpgs, beta_values_b)
})
dim(beta_values_b)
dim(beta_values_desc)
str(cpgs)
# load external functions
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
# Create a descriptor of the big.matrix
beta_values_desc <- describe(beta_values_b)
# Set up the cluster
cl <- makeCluster(num_cores)
# Export necessary objects and functions to the cluster
clusterExport(cl, c("calculate_Y_pred", "cpgs", "beta_values_desc", "Ys"))
# Load required libraries and attach the big.matrix on each worker
clusterEvalQ(cl, {
library(bigmemory)
library(data.table)
setkey(cpgs, Y.pred)
beta_values_b <- attach.big.matrix(beta_values_desc)
})
# Run parallel computation
Y_preds <- parLapplyLB(cl, Ys, function(Y) {
calculate_Y_pred(Y, cpgs, beta_values_b)
})
# Stop the cluster
stopCluster(cl)
Y_preds_df <- data.frame(Y = rep(Ys, sapply(Y_preds, length)),
pred = unlist(Y_preds))
View(Y_preds_df)
summarise(Y_preds_df$pred)
table(Y_preds_df$pred)
factor(Y_preds_df$pred)
summary(factor(Y_preds_df$pred))
dim(Y_preds_df)
mymetharray=c('/input/mymetharray.csv')
dat.meth=read.csv(mymetharray)
dat.meth=read.csv('/input/mymetharray.csv')
dat.meth=read.csv('input/mymetharray.csv')
dat.meth$Intercept=1
str(dat.meth)
str(beta_values_b)
str(sample_annotation)
str(Density_Data$beta_values)
View(BPDNAm_SS_updated)
View(BPDNAm_cov)
View(BPDNAm_ext)
View(BPDNAm_SS)
head(BPDNAm_SS)
list.files("/u/scratch/c/cobeaman/")
qload("/u/scratch/c/cobeaman/BipolarMethylationData.qs", nthreads = 36)
beta_values <- getBeta(mSetSqFlt)
warnings()
gc()
DNAmGrimAge2_final <- readRDS("/u/project/ophoff/cobeaman/Tools/DNAmGrimAgeGitHub/input/DNAmGrimAge2_final.Rds")
View(DNAmGrimAge2_final)
head(BPDNAm_SS_updated)
# Merge BPDNAm_SS with only the new columns from bp_master
BPDNAm_SS_updated <- BPDNAm_SS %>%
left_join(bp_master %>% select(Sample_Name, all_of(new_cols)), by = "Sample_Name") %>%
mutate(
Age_Months = interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "months") %>%
floor(),
Age_Years = interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "years") %>%
floor()
) %>%
select(Sample_Name, Basename, all_of(new_cols), Age_Years, Age_Months)
View(BPDNAm_SS_updated)
# Columns to check for missing values
columns_to_check <- c("Age_Years", "Gender", "Diagnosis")
# Merging and filling more missing values from BPDNAm_cov and BPDNAm_ext
BPDNAm_SS_updated <- BPDNAm_SS_updated %>%
left_join(select(BPDNAm_cov, Sample_Name, Gender, Diagnosis, Age_Years), by = "Sample_Name", suffix = c("", ".cov")) %>%
left_join(select(BPDNAm_ext, Sample_Name, Gender, Diagnosis, Age_Years), by = "Sample_Name", suffix = c("", ".ext")) %>%
mutate(
Gender = coalesce(Gender.cov, Gender.ext, Gender),
Diagnosis = coalesce(Diagnosis.cov, Diagnosis.ext, Diagnosis),
Age_Years = coalesce(Age_Years.cov, Age_Years.ext, Age_Years),
Age_Months = if_else(
is.na(interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "months") %>%
floor()),
Age_Years * 12,
interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "months") %>%
floor()
)
) %>%
select(-ends_with(".cov"), -ends_with(".ext"))
View(BPDNAm_SS_updated)
setwd("~/project-ophoff/BP-DNAm")
BPDNAm_SS_updated %>%
{
num_samples <- nrow(.)
filename <- sprintf("BPDNAm_SS_updated_%d.csv", num_samples)
fwrite(., filename)
}
rm(mSetSqFlt)
gc()
str(Density_Data$sample_groups)
head(Density_Data$sample_groups)
sample_annotation <- fread("~/project-ophoff/BP-DNAm/BPDNAm_SS_updated_2464.csv")
View(sample_annotation)
str(sample_annotation)
str(mymetharray)
str(grimage2)
list.files('/u/project/ophoff/cobeaman/Tools/DNAmGrimAgeGitHub/input')
# load packages
pacman::p_load(minfi, IlluminaHumanMethylationEPICv2anno.20a1.hg38, dplyr,
data.table, BioAge, dnaMethyAge, meffil, methylclock, qs, ggplot2,
plotly, RColorBrewer, reshape2, GenomicRanges, bigmemory, biganalytics,
SummarizedExperiment, tidyverse, purrr, biglm, foreach, doParalell)
install.packages("doParallel", repos="http://R-Forge.R-project.org")
pacman::p_load(minfi, IlluminaHumanMethylationEPICv2anno.20a1.hg38, dplyr,
data.table, BioAge, dnaMethyAge, meffil, methylclock, qs, ggplot2,
plotly, RColorBrewer, reshape2, GenomicRanges, bigmemory, biganalytics,
SummarizedExperiment, tidyverse, purrr, biglm, foreach, doParallel)
gc()
# Load required packages
pacman::p_load(minfi, IlluminaHumanMethylationEPICv2anno.20a1.hg38, dplyr,
data.table, BioAge, dnaMethyAge, meffil, methylclock, qs, ggplot2,
plotly, RColorBrewer, reshape2, GenomicRanges, bigmemory, biganalytics,
SummarizedExperiment, tidyverse, purrr, biglm, foreach, doParallel)
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
inputs <- prepare_inputs()
grimage2_data <- load_grimage2_data()
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
# Function to calculate DNAm protein variables using parallel processing
calculate_Y_pred <- function(Y, cpgs, beta_values, sample_annotation) {
cpgs1 <- cpgs[Y.pred == Y]
cols <- match(cpgs1$var, colnames(beta_values))
cols <- cols[!is.na(cols)]
# Use biganalytics for efficient column means
X <- colMeans(beta_values[, cols])
X <- c(1, sample_annotation$Age_Years[1], X)  # Add intercept and age
# Debugging information
print(paste("Y:", Y))
print(paste("Length of X:", length(X)))
print(paste("Length of cpgs1$beta:", length(cpgs1$beta)))
Y.pred <- as.numeric(X %*% cpgs1$beta)
return(Y.pred)
}
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
str(cpgs1$var)
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
grimage2_data <- load_grimage2_data()
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
grimage2_data <- load_grimage2_data()
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
grimage2_data <- load_grimage2_data()
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
str(grimage2_data)
str(inputs)
colnames_beta_values <- colnames(as.matrix(inputs$beta_values))
print(head(colnames_beta_values, 10))
dim(inputs$beta_values)
colnames_beta_values <- colnames(inputs$beta_values)
print(head(colnames_beta_values, 10))
str(inputs$beta_values)
str(as.matrix(inputs$beta_values))
print(head(grimage2_data$cpgs$var, 10))
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
grimage2_data <- load_grimage2_data()
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
# Load required packages
pacman::p_load(BioAge, biganalytics, biglm, bigmemory, dplyr, dnaMethyAge, foreach, GenomicRanges,
ggplot2, IlluminaHumanMethylationEPICv2anno.20a1.hg38, meffil, methylclock,
minfi, plotly, purrr, qs, reshape2, SummarizedExperiment, tidyverse)
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
inputs <- prepare_inputs()
colnames_beta_values <- colnames(inputs$beta_values)
print(head(colnames_beta_values, 10))
print(head(grimage2_data$cpgs$var, 10))
sample_annotation <- fread("~/project-ophoff/BP-DNAm/BPDNAm_SS_updated_2464.csv")
Density_Data <- qread("/u/scratch/c/cobeaman/Density_Data.qs", nthreads = 36)
Density_Data$sample_groups
sample_annotation$Sample_Name
common_samples <- intersect(Density_Data$sample_groups, sample_annotation$Sample_Name)
head(common_samples, 10)
str(common_by)
str(common_samples)
sample_annotation <- sample_annotation %>%
filter(Sample_Name %in% common_samples) %>%
arrange(match(Sample_Name, common_samples))
str(sample_annotation)
setkey(sample_annotation, Basename)
beta_values <- as.matrix(Density_Data$beta_values)
str(beta_values)
colnames(beta_values) <- sample_annotation$Sample_Name
str(beta_values)
print(head(beta_values,10))
beta_values_file <- "/u/scratch/c/cobeaman/beta_values.bk"
beta_values_desc <- "/u/scratch/c/cobeaman/beta_values.desc"
beta_values <- filebacked.big.matrix(nrow = nrow(beta_values),
ncol = ncol(beta_values),
type = "double",
backingfile = beta_values_file,
descriptorfile = beta_values_desc)
beta_values_file <- "beta_values.bk"
beta_values_desc <- "beta_values.desc"
beta_values <- filebacked.big.matrix(nrow = nrow(beta_values),
ncol = ncol(beta_values),
type = "double",
backingpath = "/u/scratch/c/cobeaman/",
backingfile = beta_values_file,
descriptorfile = beta_values_desc)
beta_values[,] <- beta_values
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
inputs <- prepare_inputs()
# Verify column names of beta_values
colnames_beta_values <- colnames(inputs$beta_values)
print(head(colnames_beta_values, 10))
# Verify the first few variable names in cpgs
print(head(grimage2_data$cpgs$var, 10))
gc()
# Load sample annotations and density data
sample_annotation <- fread("~/project-ophoff/BP-DNAm/BPDNAm_SS_updated_2464.csv")
Density_Data <- qread("/u/scratch/c/cobeaman/Density_Data.qs", nthreads = 36)
# Align data
common_samples <- intersect(Density_Data$sample_groups, sample_annotation$Sample_Name)
sample_annotation <- sample_annotation %>%
filter(Sample_Name %in% common_samples) %>%
arrange(match(Sample_Name, common_samples))
setkey(sample_annotation, Basename)
# Convert beta values to matrix and assign column names
beta_values_matrix <- as.matrix(Density_Data$beta_values)
colnames(beta_values_matrix) <- sample_annotation$Sample_Name
beta_values_file <- "beta_values.bk"
beta_values_desc <- "beta_values.desc"
beta_values <- filebacked.big.matrix(
nrow = nrow(beta_values_matrix),
ncol = ncol(beta_values_matrix),
type = "double",
backingpath = "/u/scratch/c/cobeaman/",
backingfile = beta_values_file,
descriptorfile = beta_values_desc
)
beta_values[,] <- beta_values_matrix
list(
sample_annotation = sample_annotation,
beta_values = beta_values,
beta_values_file = beta_values_file,
beta_values_desc = beta_values_desc
)
str(inputs$beta_values)
grimage2_data <- load_grimage2_data()
Ys <- unique(grimage2_data$cpgs$Y.pred)
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
gc()
#### Step 1: Prepare inputs ####
# Load required packages
pacman::p_load(BioAge, biganalytics, biglm, bigmemory, dplyr, dnaMethyAge, foreach, GenomicRanges,
ggplot2, IlluminaHumanMethylationEPICv2anno.20a1.hg38, meffil, methylclock,
minfi, plotly, purrr, qs, reshape2, SummarizedExperiment, tidyverse)
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
#### Step 2: Generate DNAm Protein Variables, DNAmGrimAge2 and AgeAccelGrim2 ####
# Main script execution with added debugging and cleanup
inputs <- prepare_inputs()
# Verify column names of beta_values
colnames_beta_values <- colnames(inputs$beta_values)
gc()
#### Step 1: Prepare inputs ####
# Load required packages
pacman::p_load(BioAge, biganalytics, biglm, bigmemory, dplyr, dnaMethyAge, foreach, GenomicRanges,
ggplot2, IlluminaHumanMethylationEPICv2anno.20a1.hg38, meffil, methylclock,
minfi, plotly, purrr, qs, reshape2, SummarizedExperiment, tidyverse)
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
#### Step 2: Generate DNAm Protein Variables, DNAmGrimAge2 and AgeAccelGrim2 ####
# Main script execution with added debugging and cleanup
inputs <- NULL
tryCatch({
inputs <- prepare_inputs()
on.exit(cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc), add = TRUE)
grimage2_data <- load_grimage2_data()
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
output <- scale_predictions(results, inputs$sample_annotation, grimage2_data$gold)
save_output(output, inputs$beta_values_file, inputs$beta_values_desc)
generate_GrimAge2_AgeAccelGrim2(inputs$sample_annotation, Ys, grimage2_data$glmnet_final1, grimage2_data$gold)
}, finally = {
if (!is.null(inputs)) {
cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc)
}
})
View(save_output)
#### Step 1: Prepare inputs ####
# Load required packages
pacman::p_load(BioAge, biganalytics, biglm, bigmemory, data.table, doParallel, dplyr, dnaMethyAge, foreach, GenomicRanges,
ggplot2, IlluminaHumanMethylationEPICv2anno.20a1.hg38, meffil, methylclock,
minfi, plotly, purrr, qs, reshape2, SummarizedExperiment, tidyverse)
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
#### Step 2: Generate DNAm Protein Variables, DNAmGrimAge2 and AgeAccelGrim2 ####
# Generate imestamped filename
timestamp <- format(Sys.time(), "%m%d%Y_%H%M%S")
debug_log_file <- paste0("debug_log_", timestamp, ".txt")
# Main script execution with enhanced debugging and cleanup
inputs <- NULL
sink(debug_log_file)
tryCatch({
inputs <- prepare_inputs()
on.exit(cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc), add = TRUE)
# Print column names of beta_values for debugging
cat("Column names of beta_values:\n")
print(head(colnames(inputs$beta_values), 10))
grimage2_data <- load_grimage2_data()
# Print first few entries of cpgs$var for debugging
cat("First few entries of cpgs$var:\n")
print(head(grimage2_data$cpgs$var, 10))
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables_test(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
print(head(results))  # Print the results to verify parallel execution
}, error = function(e) {
cat("Error: ", e$message, "\n")
}, finally = {
if (!is.null(inputs)) {
cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc)
}
})
sink()
gc()
#### Step 1: Prepare inputs ####
# Load required packages
pacman::p_load(BioAge, biganalytics, biglm, bigmemory, data.table, doParallel, dplyr, dnaMethyAge, foreach, GenomicRanges,
ggplot2, IlluminaHumanMethylationEPICv2anno.20a1.hg38, meffil, methylclock,
minfi, plotly, purrr, qs, reshape2, SummarizedExperiment, tidyverse)
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
#### Step 2: Generate DNAm Protein Variables, DNAmGrimAge2 and AgeAccelGrim2 ####
# Generate imestamped filename
timestamp <- format(Sys.time(), "%m%d%Y_%H%M%S")
debug_log_file <- paste0("debug_log_", timestamp, ".txt")
# Main script execution with enhanced debugging and cleanup
inputs <- NULL
sink(debug_log_file)
tryCatch({
inputs <- prepare_inputs()
on.exit(cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc), add = TRUE)
# Print column names of beta_values for debugging
cat("Column names of beta_values:\n")
print(head(colnames(inputs$beta_values), 10))
grimage2_data <- load_grimage2_data()
# Print first few entries of cpgs$var for debugging
cat("First few entries of cpgs$var:\n")
print(head(grimage2_data$cpgs$var, 10))
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables_test(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
print(head(results))  # Print the results to verify parallel execution
}, error = function(e) {
cat("Error: ", e$message, "\n")
}, finally = {
if (!is.null(inputs)) {
cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc)
}
})
sink()
gc()
#### Step 1: Prepare inputs ####
# Load required packages
pacman::p_load(BioAge, biganalytics, biglm, bigmemory, data.table, doParallel, dplyr, dnaMethyAge, foreach, GenomicRanges,
ggplot2, IlluminaHumanMethylationEPICv2anno.20a1.hg38, meffil, methylclock,
minfi, plotly, purrr, qs, reshape2, SummarizedExperiment, tidyverse)
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
#### Step 2: Generate DNAm Protein Variables, DNAmGrimAge2 and AgeAccelGrim2 ####
# Generate imestamped filename
timestamp <- format(Sys.time(), "%m%d%Y_%H%M%S")
debug_log_file <- paste0("debug_log_", timestamp, ".txt")
# Main script execution with enhanced debugging and cleanup
inputs <- NULL
sink(debug_log_file)
tryCatch({
inputs <- prepare_inputs()
on.exit(cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc), add = TRUE)
# Print column names of beta_values for debugging
cat("Column names of beta_values:\n")
print(head(colnames(inputs$beta_values), 10))
grimage2_data <- load_grimage2_data()
# Print first few entries of cpgs$var for debugging
cat("First few entries of cpgs$var:\n")
print(head(grimage2_data$cpgs$var, 10))
Ys <- unique(grimage2_data$cpgs$Y.pred)
results <- calculate_protein_variables_test(Ys, grimage2_data$cpgs, inputs$beta_values, inputs$sample_annotation)
print(head(results))  # Print the results to verify parallel execution
}, error = function(e) {
cat("Error: ", e$message, "\n")
}, finally = {
if (!is.null(inputs)) {
cleanup_temp_files(inputs$beta_values_file, inputs$beta_values_desc)
}
})
sink()
list.files(path = '~/project-ophoff/Tools/DNAmGrimAgeGitHub', full.names = T, recursive = T)
