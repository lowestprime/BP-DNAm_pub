as.data.table()
# ID missing grimage2 CpGs in beta_values_final
grimage2_cpgs <- grimage2_cpgs[grepl("^cg", grimage2_cpgs)]
cleaned_grimage2_cpgs <- unique(grimage2_cpgs)
missing_cpgs <- setdiff(cleaned_grimage2_cpgs, names(beta_values_final))
print(missing_cpgs)
# Assuming grimage2_cpgs is already defined
beta_values_subset <- beta_values_final %>%
select(SampleID, Age, Female, any_of(cleaned_grimage2_cpgs)) %>%
as.data.table()
# Assuming grimage2_cpgs is already defined
beta_values_subset <- beta_values_final %>%
select(SampleID, Age, Female, Diagnosis, any_of(cleaned_grimage2_cpgs)) %>%
as.data.table()
# Go to project dir or skip and run in current project dir
setwd("~/project-ophoff/BP-DNAm")
# load packages
if (!require("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(dplyr, tidyr, stringr, readr, readxl, data.table, lubridate, tibble)
# Read in Bipolar 2023 Sample Sheet.csv as data frame and remove Pool_ID col
BPDNAm_SS <- read.csv("Bipolar 2023 Sample Sheet.csv") %>%
select(-Pool_ID)
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = "Sample_id",
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = "Sample_id",
Age_Years = "Sample.Age"
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M"))
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M"))
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv")
View(BPDNAm_ext)
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
# load packages
if (!require("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(dplyr, tidyr, stringr, readr, readxl, data.table, lubridate, tibble)
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
colnames(BPDNAm_ext)
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M"))
head(BPDNAm_ext)
library(dplyr)
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
detach("package:dplyr", unload = TRUE)
library(dplyr)
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
dplyr::rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
BPDNAm_cov <- read.table("From_Roel/highcov_technical_covariates.txt", sep = "\t", header = TRUE, row.names = 1) %>%
t() %>%
as_tibble(rownames = "Sample_Name") %>%
select(Sample_Name, !starts_with("/u/project/")) %>%
rename(Gender = sex,
Diagnosis = diagnosis,
Age_Years = age) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)), # Remove non-numeric characters and convert to numeric
Sample_Name = gsub("^X(\\d{3})\\.(BG\\d{5})$", "\\1-\\2", Sample_Name)) # Change Sample_Name format
install.packages("conflicted")
pacman::p_load(conflicted, dplyr, tidyr, stringr, readr, readxl, data.table, lubridate, tibble)
# load packages
if (!require("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(conflicted, dplyr, tidyr, stringr, readr, readxl, data.table, lubridate, tibble)
# Read in Bipolar 2023 Sample Sheet.csv as data frame and remove Pool_ID col
BPDNAm_SS <- read.csv("Bipolar 2023 Sample Sheet.csv") %>%
select(-Pool_ID)
library(dplyr)
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
dplyr::rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
# Read in highcov_technical_covariates.txt as data frame
BPDNAm_cov <- read.table("From_Roel/highcov_technical_covariates.txt", sep = "\t", header = TRUE, row.names = 1) %>%
t() %>%
as_tibble(rownames = "Sample_Name") %>%
select(Sample_Name, !starts_with("/u/project/")) %>%
rename(Gender = sex,
Diagnosis = diagnosis,
Age_Years = age) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)), # Remove non-numeric characters and convert to numeric
Sample_Name = gsub("^X(\\d{3})\\.(BG\\d{5})$", "\\1-\\2", Sample_Name)) # Change Sample_Name format
# Go to project dir or skip and run in current project dir
setwd("~/project-ophoff/BP-DNAm")
# load packages
if (!require("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(conflicted, dplyr, tidyr, stringr, readr, readxl, data.table, lubridate, tibble)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("rename", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("recode", "dplyr")
# Read in Bipolar 2023 Sample Sheet.csv as data frame and remove Pool_ID col
BPDNAm_SS <- read.csv("Bipolar 2023 Sample Sheet.csv") %>%
select(-Pool_ID)
library(dplyr)
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
dplyr::rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
# Read in highcov_technical_covariates.txt as data frame
BPDNAm_cov <- read.table("From_Roel/highcov_technical_covariates.txt", sep = "\t", header = TRUE, row.names = 1) %>%
t() %>%
as_tibble(rownames = "Sample_Name") %>%
select(Sample_Name, !starts_with("/u/project/")) %>%
rename(Gender = sex,
Diagnosis = diagnosis,
Age_Years = age) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)), # Remove non-numeric characters and convert to numeric
Sample_Name = gsub("^X(\\d{3})\\.(BG\\d{5})$", "\\1-\\2", Sample_Name)) # Change Sample_Name format
# Read in Complete BIG Data.xlsx as data frame
bp_master <- read_excel("Complete BIG Data.xlsx")
# Rename 'Sample_id' in bp_master to 'Sample_Name' for matching and remove duplicate entries
bp_master <- bp_master %>%
rename(Sample_Name = Sample_id) %>%
group_by(Sample_Name) %>%
filter(`Date of sample collection` == max(`Date of sample collection`)) %>%
slice(1) %>%
ungroup()
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("rename", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("recode", "dplyr")
conflict_prefer("slice", "dplyr")
# Read in Bipolar 2023 Sample Sheet.csv as data frame and remove Pool_ID col
BPDNAm_SS <- read.csv("Bipolar 2023 Sample Sheet.csv") %>%
select(-Pool_ID)
library(dplyr)
# Read in 2000_sample_covariates.csv as data frame, remove Pool_ID col and rename 'Sample_id' col
BPDNAm_ext <- read.csv("From_Roel/2000_sample_covariates.csv") %>%
select(-RIN) %>%
dplyr::rename(Sample_Name = Sample_id,
Age_Years = Sample.Age
) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)),
Gender = recode(Gender, "Female" = "F", "Male" = "M")) # Remove non-numeric characters and convert to numeric
# Read in highcov_technical_covariates.txt as data frame
BPDNAm_cov <- read.table("From_Roel/highcov_technical_covariates.txt", sep = "\t", header = TRUE, row.names = 1) %>%
t() %>%
as_tibble(rownames = "Sample_Name") %>%
select(Sample_Name, !starts_with("/u/project/")) %>%
rename(Gender = sex,
Diagnosis = diagnosis,
Age_Years = age) %>%
mutate(Age_Years = as.numeric(gsub("[^0-9.]", "", Age_Years)), # Remove non-numeric characters and convert to numeric
Sample_Name = gsub("^X(\\d{3})\\.(BG\\d{5})$", "\\1-\\2", Sample_Name)) # Change Sample_Name format
# Read in Complete BIG Data.xlsx as data frame
bp_master <- read_excel("Complete BIG Data.xlsx")
# Rename 'Sample_id' in bp_master to 'Sample_Name' for matching and remove duplicate entries
bp_master <- bp_master %>%
rename(Sample_Name = Sample_id) %>%
group_by(Sample_Name) %>%
filter(`Date of sample collection` == max(`Date of sample collection`)) %>%
slice(1) %>%
ungroup()
# Create BPDNAm_SS missing entries df for samples not present in bp_master
missing_samples <- BPDNAm_SS %>%
anti_join(bp_master, by = "Sample_Name")
# Identify columns in bp_master that are not in BPDNAm_SS
new_cols <- setdiff(colnames(bp_master), colnames(BPDNAm_SS))
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("rename", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("recode", "dplyr")
conflict_prefer("slice", "dplyr")
conflict_prefer("setdiff", "dplyr")
# Create BPDNAm_SS missing entries df for samples not present in bp_master
missing_samples <- BPDNAm_SS %>%
anti_join(bp_master, by = "Sample_Name")
# Identify columns in bp_master that are not in BPDNAm_SS
new_cols <- setdiff(colnames(bp_master), colnames(BPDNAm_SS))
BPDNAm_SS_updated <- BPDNAm_SS %>%
left_join(bp_master %>% select(Sample_Name, all_of(new_cols)), by = "Sample_Name") %>%
mutate(
Age_Months = round(interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "months"), 1),
Age_Years = round(interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "years"), 1)
) %>%
select(Sample_Name, Basename, all_of(new_cols), Age_Years, Age_Months)
# Columns to check for missing values
columns_to_check <- c("Age_Years", "Gender", "Diagnosis")
# Merging and filling more missing values from BPDNAm_cov and BPDNAm_ext
BPDNAm_SS_updated <- BPDNAm_SS_updated %>%
left_join(select(BPDNAm_cov, Sample_Name, Gender, Diagnosis, Age_Years), by = "Sample_Name", suffix = c("", ".cov")) %>%
left_join(select(BPDNAm_ext, Sample_Name, Gender, Diagnosis, Age_Years), by = "Sample_Name", suffix = c("", ".ext")) %>%
mutate(
Gender = coalesce(Gender.cov, Gender.ext, Gender),
Diagnosis = coalesce(Diagnosis.cov, Diagnosis.ext, Diagnosis),
Age_Years = round(coalesce(Age_Years.cov, Age_Years.ext, Age_Years), 1),
Age_Months = round(if_else(
is.na(interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "months") %>%
floor()),
Age_Years * 12,
interval(`Date of birth`, `Date of sample collection`) %>%
time_length(unit = "months") %>%
floor()
), 1)
) %>%
select(-ends_with(".cov"), -ends_with(".ext"))
BPDNAm_SS_updated %>%
{
num_samples <- nrow(.)
filename <- sprintf("BPDNAm_SS_updated_%d.csv", num_samples)
fwrite(., filename)
}
View(BPDNAm_SS_updated)
rm(list=ls())
options(stringsAsFactors = F)
# Load packages
pacman::p_load(dplyr, tidyverse, data.table, reshape2, purrr, qs, ENmix)
# optional log memory use during workflow
# Rprofmem("memory_profile.log")
# Set working directory and source external functions
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
# Load the data
beta_values <- qread("/u/scratch/c/cobeaman/Density_Data.qs", nthreads = 36)$beta_values
grimage2_cpgs <- (readRDS("input/DNAmGrimAge2_final.Rds")[[1]])$var
grimage2_cpgs <- grimage2_cpgs[-c(1, 2)]
sample_annotation <- fread("~/project-ophoff/BP-DNAm/BPDNAm_SS_updated_2464.csv")
gc()
# Clean CpG names
beta_values_c <- rm.cgsuffix(beta_values)
rownames(beta_values_c) <- gsub("_.*$", "", rownames(beta_values_c))
# Subset beta_values to include only GrimAge2 CpGs
# beta_values_subset <- beta_values[rownames(beta_values) %in% unique(grimage2_cpgs), ]
# Handle duplicate CpG names
duplicate_cpgs <- duplicated(rownames(beta_values_c))
if(any(duplicate_cpgs)) {
cat("Warning: Found", sum(beta_values_c), "duplicate CpG names. Using the first occurrence of each.\n")
beta_values_c <- beta_values_c[!duplicate_cpgs, ]
}
rm(beta_values)
gc()
# Convert to data.table
beta_values_dt <- as.data.table(t(beta_values_c), keep.rownames = "Basename")
# head(colnames(beta_values_dt))
# Convert beta_values_dt to a data frame and perform a left join with selected columns from sample_annotation
temp_data <- beta_values_dt %>%
as.data.frame() %>%
left_join(sample_annotation %>%
select(Basename, Sample_Name, Gender, Diagnosis, Age_Years) %>%
mutate(Female = case_when(
Gender == "F" ~ 1,
Gender == "M" ~ 0,
TRUE ~ NA_real_
)),
by = "Basename")
# Rename the columns using colnames() to avoid issues with non-standard column names
colnames(temp_data)[colnames(temp_data) == "Sample_Name"] <- "SampleID"
colnames(temp_data)[colnames(temp_data) == "Age_Years"] <- "Age"
# Reorder the columns, bringing SampleID, Age, and Female to the front
beta_values_final <- temp_data %>%
select(SampleID, Age, Female, Diagnosis, everything()) %>%
as.data.table()
# ID missing grimage2 CpGs in beta_values_final
grimage2_cpgs <- grimage2_cpgs[grepl("^cg", grimage2_cpgs)]
cleaned_grimage2_cpgs <- unique(grimage2_cpgs)
missing_cpgs <- setdiff(cleaned_grimage2_cpgs, names(beta_values_final))
print(missing_cpgs)
# Assuming grimage2_cpgs is already defined
beta_values_subset <- beta_values_final %>%
select(SampleID, Age, Female, Diagnosis, any_of(cleaned_grimage2_cpgs)) %>%
as.data.table()
as.data.frame(missing_cpgs)
save_with_info(missing_cpgs, "missing_cpgs")
# Save missing_cpgs
missing_cpgs_dt <- as.data.frame(missing_cpgs)
save_with_info(missing_cpgs_dt, "missing_cpgs")
save_with_info(beta_values_subset, "mymetharray_subset")
View(missing_cpgs_dt)
View(beta_values_subset)
#your input/output file names
mymetharray=c('/input/mymetharray_subset_2458_r_654_c_08112024_142045.csv')
grimage2.rds='/input/DNAmGrimAge2_final.Rds'
grimage2=readRDS(grimage2.rds)
#your input/output file names
mymetharray=c('/input/mymetharray_subset_2458_r_654_c_08112024_142045.csv')
grimage2=readRDS("/input/DNAmGrimAge2_final.Rds")
#your input/output file names
mymetharray=c('/input/mymetharray_subset_2458_r_654_c_08112024_142045.csv')
grimage2=readRDS("/input/DNAmGrimAge2_final.Rds")
#your input/output file names
mymetharray=c('/input/mymetharray_subset_2458_r_654_c_08112024_142045.csv')
grimage2=readRDS("input/DNAmGrimAge2_final.Rds")
#output file name
alldata.csv='output/BPDNAm_Subset_DNAmGrimAge2.csv'
```
#your input/output file names
mymetharray=c('/input/mymetharray_subset_2458_r_654_c_08112024_142045.csv')
grimage2=readRDS("input/DNAmGrimAge2_final.Rds")
#output file name
alldata.csv='output/BPDNAm_Subset_DNAmGrimAge2.csv'
Y.pred0.name=c('COX')
Y.pred.name=c('DNAmGrimAge2')
aa.name=c('AgeAccelGrim2')
#
cpgs=grimage2[[1]]
glmnet.final1=grimage2[[2]]
gold=grimage2[[3]]
#
F_scale<-function(INPUT0,Y.pred0.name,Y.pred.name,gold){
out.para=subset(gold,var=='COX')
out.para.age=subset(gold,var=='Age')
m.age=out.para.age$mean
sd.age=out.para.age$sd
Y0=INPUT0[,Y.pred0.name]
Y=(Y0-out.para$mean)/out.para$sd
INPUT0[,Y.pred.name]=as.numeric((Y*sd.age)+m.age)
return(INPUT0)
}
dat.meth=read.csv(mymetharray)
mymetharray=c('input/mymetharray_subset_2458_r_654_c_08112024_142045.csv')
dat.meth=read.csv(mymetharray)
dat.meth$Intercept=1
Ys=unique(cpgs$Y.pred)
Ys
for(k in 1:length(Ys)){
cpgs1=subset(cpgs,Y.pred==Ys[k])
Xs=subset(dat.meth,select=cpgs1$var)
Y.pred=as.numeric(as.matrix(Xs)%*%cpgs1$beta)
dat.meth[,Ys[k]]=Y.pred
attr(dat.meth[,Ys[k]],"dimnames")<-NULL
}
View(dat.meth)
str(cpgs)
str(dat.meth)
for(k in 1:length(Ys)) {
cpgs1 = subset(cpgs, Y.pred == Ys[k])
# Get the intersection of column names
common_cols = intersect(cpgs1$var, colnames(dat.meth))
# Subset using only common columns
Xs = dat.meth[, common_cols, drop = FALSE]
# Make sure cpgs1 only includes rows for common columns
cpgs1 = cpgs1[cpgs1$var %in% common_cols, ]
Y.pred = as.numeric(as.matrix(Xs) %*% cpgs1$beta)
dat.meth[, Ys[k]] = Y.pred
attr(dat.meth[, Ys[k]], "dimnames") <- NULL
}
conflicted::conflicts_prefer(dplyr::intersect)
for(k in 1:length(Ys)) {
cpgs1 = subset(cpgs, Y.pred == Ys[k])
# Get the intersection of column names
common_cols = intersect(cpgs1$var, colnames(dat.meth))
# Subset using only common columns
Xs = dat.meth[, common_cols, drop = FALSE]
# Make sure cpgs1 only includes rows for common columns
cpgs1 = cpgs1[cpgs1$var %in% common_cols, ]
Y.pred = as.numeric(as.matrix(Xs) %*% cpgs1$beta)
dat.meth[, Ys[k]] = Y.pred
attr(dat.meth[, Ys[k]], "dimnames") <- NULL
}
str(cpgs)
str(dat.meth)
vars=c('SampleID','Age','Female','Diagnosis',Ys)
output.all=subset(dat.meth,select=vars)
#
output.all$COX=as.numeric(as.matrix(subset(output.all,select=glmnet.final1$var))%*%glmnet.final1$beta)
output.all=F_scale(output.all,'COX',Y.pred.name,gold)
output.all$DNAmtemp<-output.all[,Y.pred.name]
output.all[,aa.name]=residuals(lm(DNAmtemp~Age,data=output.all,na.action = na.exclude))
output.all$DNAmtemp<-output.all$COX<-NULL
View(output.all)
old.name=c('DNAmadm','DNAmCystatin_C','DNAmGDF_15','DNAmleptin','DNAmpai_1','DNAmTIMP_1','DNAmlog.CRP','DNAmlog.A1C')
new.name=c('DNAmADM','DNAmCystatinC','DNAmGDF15'  ,'DNAmLeptin','DNAmPAI1'  ,'DNAmTIMP1','DNAmlogCRP','DNAmlogA1C')
for(k in 1:length(old.name)){
id=which(names(output.all)==old.name[k])
names(output.all)[id]=new.name[k]
}
save_with_info(output.all, "BPDNAm_GrimAge2_Sourcecode_All")
save_with_info(beta_values_subset, "mymetharray_subset", path="output")
save_with_info(output.all, "BPDNAm_GrimAge2_Sourcecode_All", file="output")
save_with_info(output.all, "BPDNAm_GrimAge2_Sourcecode_All", path="output")
knit_with_parameters("/u/project/ophoff/cobeaman/Tools/DNAmGrimAgeGitHub/R_pgm2_DNAmGrimAge2.Rmd")
# Clean environment
rm(list=ls())
options(stringsAsFactors = F)
# Load packages
if (!require("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(dplyr, tidyverse, data.table, arrow, reshape2, purrr, qs, ENmix)
setwd("~/project-ophoff/Tools/DNAmGrimAgeGitHub")
source('~/project-ophoff/BP-DNAm/BPDNAm_external_functions.R')
# Load the data
beta_values <- qread("/u/scratch/c/cobeaman/Density_Data.qs", nthreads = 36)$beta_values
grimage2_cpgs <- (readRDS("input/DNAmGrimAge2_final.Rds")[[1]])$var
grimage2_cpgs <- grimage2_cpgs[-c(1, 2)]
sample_annotation <- fread("~/project-ophoff/BP-DNAm/BPDNAm_SS_updated_2464.csv")
# Clean CpG names
beta_values_c <- rm.cgsuffix(beta_values)
rownames(beta_values_c) <- gsub("_.*$", "", rownames(beta_values_c))
# Subset beta_values to include only GrimAge2 CpGs
# beta_values_subset <- beta_values[rownames(beta_values) %in% unique(grimage2_cpgs), ]
# Handle duplicate CpG names
duplicate_cpgs <- duplicated(rownames(beta_values_c))
if(any(duplicate_cpgs)) {
cat("Warning: Found", sum(beta_values_c), "duplicate CpG names. Using the first occurrence of each.\n")
beta_values_c <- beta_values_c[!duplicate_cpgs, ]
}
# Convert to data.table
beta_values_dt <- as.data.table(t(beta_values_c), keep.rownames = "Basename")
# head(colnames(beta_values_dt))
# Convert beta_values_dt to a data frame and perform a left join with selected columns from sample_annotation
temp_data <- beta_values_dt %>%
as.data.frame() %>%
left_join(sample_annotation %>%
select(Basename, Sample_Name, Gender, Diagnosis, Age_Years) %>%
mutate(Female = case_when(
Gender == "F" ~ 1,
Gender == "M" ~ 0,
TRUE ~ NA_real_
)),
by = "Basename")
# Rename the columns using colnames() to avoid issues with non-standard column names
colnames(temp_data)[colnames(temp_data) == "Sample_Name"] <- "SampleID"
colnames(temp_data)[colnames(temp_data) == "Age_Years"] <- "Age"
# Reorder the columns, bringing SampleID, Age, and Female to the front
beta_values_final <- temp_data %>%
select(SampleID, Age, Female, Diagnosis, everything()) %>%
as.data.table()
# ID missing grimage2 CpGs in beta_values_final
grimage2_cpgs <- grimage2_cpgs[grepl("^cg", grimage2_cpgs)]
cleaned_grimage2_cpgs <- unique(grimage2_cpgs)
missing_cpgs <- setdiff(cleaned_grimage2_cpgs, names(beta_values_final))
print(missing_cpgs)
# Assuming grimage2_cpgs is already defined
beta_values_subset <- beta_values_final %>%
select(SampleID, Age, Female, Diagnosis, any_of(cleaned_grimage2_cpgs)) %>%
as.data.table()
# save to qs object
# qsavem(beta_values_final, beta_values_subset, file="beta_values.qs", preset = "fast", nthreads = 36)
# Save missing_cpgs
# missing_cpgs_dt <- as.data.frame(missing_cpgs)
# save_with_info(missing_cpgs_dt, "missing_cpgs")
# Save beta_values_final and beta_values_subset as CSVs
save_with_info(beta_values_final, "mymetharray_final")
write_parquet(beta_values_final, "input/mymetharray_final_2458_r_731791_c_08122024_235109.parquet")
write_feather(beta_values_final, "input/mymetharray_final_2458_r_731791_c_08122024_235109.feather")
gc()
write_parquet(beta_values_subset, "input/mymetharray_subset_2458_r_654_c_08112024_142045.parquet")
write_feather(beta_values_subset, "input/mymetharray_subset_2458_r_654_c_08112024_142045.feather")
gc()
